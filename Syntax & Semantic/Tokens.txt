1 returntype void
1 identifier/literal myfunc
1 paranthesis (
1 paranthesis )
2 brace {
3 datatype int
3 identifier/literal i
3 separator ;
4 identifier/literal i
4 operator =
4 number 0
4 separator ;
5 keywords if
5 paranthesis (
5 identifier/literal i
5 relational_operator <
5 number 50
5 paranthesis )
6 keywords return
6 float 20.1
6 separator ;
7 brace }
9 returntype void
9 identifier/literal ilovecookies
9 paranthesis (
9 datatype int
9 identifier/literal a
9 comma ,
9 datatype int
9 identifier/literal c
9 paranthesis )
10 brace {
11 datatype int
11 identifier/literal a
11 separator ;
12 datatype int
12 identifier/literal d
12 separator ;
13 datatype int
13 identifier/literal c
13 separator ;
14 datatype int
14 identifier/literal e
14 separator ;
15 identifier/literal a
15 operator =
15 number 20
15 separator ;
16 identifier/literal b
16 operator =
16 number 30
16 separator ;
17 keywords if
17 paranthesis (
17 identifier/literal a
17 relational_operator <
17 number 20
17 paranthesis )
18 brace {
19 identifier/literal a
19 operator =
19 identifier/literal a
19 operator *
19 number 10
19 separator ;
20 identifier/literal b
20 operator =
20 identifier/literal b
20 operator *
20 number 20
20 separator ;
21 brace }
22 keywords else
22 keywords if
22 paranthesis (
22 identifier/literal a
22 relational_operator <
22 number 20
22 logical_operator ||
22 number 2
22 relational_operator >
22 number 3
22 paranthesis )
23 brace {
24 identifier/literal a
24 operator =
24 number 20
24 separator ;
25 brace }
26 keywords else
27 identifier/literal e
27 operator =
27 number 9
27 operator *
27 number 45
27 separator ;
28 keywords break
28 separator ;
29 keywords return
29 number 20
29 separator ;
30 keywords for
30 paranthesis (
30 identifier/literal q
30 operator =
30 number 1
30 separator ;
30 identifier/literal q
30 relational_operator <
30 number 10
30 separator ;
30 identifier/literal q
30 operator =
30 identifier/literal q
30 operator +
30 number 1
30 paranthesis )
31 brace }