1 returntype void
1 identifier/literal myfunc
1 paranthesis (
1 paranthesis )
2 brace {
3 datatype int
3 identifier/literal i
3 separator ;
4 identifier/literal i
4 operator =
4 number 0
4 separator ;
5 keywords if
5 paranthesis (
5 identifier/literal i
5 relational_operator <
5 number 50
5 paranthesis )
6 keywords return
6 float 20.1
6 separator ;
7 brace }
9 returntype void
9 identifier/literal ilovecookies
9 paranthesis (
9 datatype int
9 identifier/literal a
9 comma ,
9 datatype int
9 identifier/literal c
9 paranthesis )
10 brace {
11 datatype int
11 identifier/literal a
11 separator ;
12 datatype int
12 identifier/literal d
12 separator ;
13 datatype int
13 identifier/literal c
13 separator ;
14 datatype int
14 identifier/literal e
14 separator ;
15 datatype int
15 identifier/literal b
15 separator ;
16 identifier/literal a
16 operator =
16 number 20
16 separator ;
17 identifier/literal b
17 operator =
17 number 30
17 separator ;
18 keywords if
18 paranthesis (
18 identifier/literal a
18 relational_operator <
18 number 20
18 paranthesis )
19 brace {
20 identifier/literal a
20 operator =
20 identifier/literal a
20 operator *
20 number 10
20 separator ;
21 identifier/literal b
21 operator =
21 identifier/literal b
21 operator *
21 number 20
21 separator ;
22 brace }
23 keywords else
23 keywords if
23 paranthesis (
23 identifier/literal a
23 relational_operator <
23 number 20
23 logical_operator ||
23 number 2
23 relational_operator >
23 number 3
23 paranthesis )
24 brace {
25 identifier/literal a
25 operator =
25 number 20
25 separator ;
26 brace }
27 keywords else
27 keywords else
28 identifier/literal e
28 operator =
28 number 9
28 operator *
28 number 45
28 separator ;
29 keywords break
29 separator ;
30 keywords return
30 number 20
30 separator ;
31 brace }
32 returntype void
32 keywords main
32 paranthesis (
32 paranthesis )
33 brace {
34 keywords return
34 number 0
34 separator ;
35 brace }
